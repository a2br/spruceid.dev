(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{112:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return f}));var r=n(0),i=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var d=i.a.createContext({}),l=function(e){var t=i.a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=l(e.components);return i.a.createElement(d.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},b=i.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,o=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),p=l(n),b=r,f=p["".concat(o,".").concat(b)]||p[b]||u[b]||a;return n?i.a.createElement(f,s(s({ref:t},d),{},{components:n})):i.a.createElement(f,s({ref:t},d))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=b;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var d=2;d<a;d++)o[d]=n[d];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},67:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return d})),n.d(t,"default",(function(){return p}));var r=n(3),i=n(7),a=(n(0),n(112)),o=["components"],s={id:"glossary",title:"Core DIDKit Glossary",sidebar_label:"Glossary"},c={unversionedId:"didkit/glossary",id:"didkit/glossary",isDocsHomePage:!1,title:"Core DIDKit Glossary",description:"*For more detailed explanations and references to core specifications, see the",source:"@site/docs\\didkit\\terminology.md",slug:"/didkit/glossary",permalink:"/docs/didkit/glossary",editUrl:"https://github.com/spruceid/docs/didkit/terminology.md",version:"current",sidebar_label:"Glossary",sidebar:"docs",previous:{title:"Specifications and Dependencies",permalink:"/docs/didkit/specs_and_deps"},next:{title:"Command Line Interface",permalink:"/docs/didkit-interfaces/cli"}},d=[{value:"Verifiable Credentials (&quot;<em>VCs</em>&quot;)",id:"verifiable-credentials-vcs",children:[]},{value:"Wallet",id:"wallet",children:[]},{value:"Decentralized Identifiers (&quot;<em>DIDs</em>&quot;)",id:"decentralized-identifiers-dids",children:[]},{value:"DID Method",id:"did-method",children:[]},{value:"DID:Key",id:"didkey",children:[]},{value:"JSON Web Key (JWK)",id:"json-web-key-jwk",children:[]}],l={toc:d};function p(e){var t=e.components,n=Object(i.a)(e,o);return Object(a.b)("wrapper",Object(r.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,Object(a.b)("em",{parentName:"p"},"For more detailed explanations and references to core specifications, see the\nmore comprehensive ",Object(a.b)("a",{parentName:"em",href:"https://spruceid.dev/docs/glossary"},"developer portal\nglossary"),".")),Object(a.b)("h3",{id:"verifiable-credentials-vcs"},'Verifiable Credentials ("',Object(a.b)("em",{parentName:"h3"},"VCs"),'")'),Object(a.b)("p",null,"Verifiable Credentials are document structures that consist of a few key\nproperties: "),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"an ",Object(a.b)("inlineCode",{parentName:"li"},"id")," (a unique ID, often a UUID with the ",Object(a.b)("inlineCode",{parentName:"li"},"urn:uuid:")," prefix or a\nresolvable URL containing another unique per-credential identifier)"),Object(a.b)("li",{parentName:"ul"},"a ",Object(a.b)("inlineCode",{parentName:"li"},"credentialSubject"),", in the sense of a data subject, usually identified by a DID or other privacy-preserving indirection or pseudonym)"),Object(a.b)("li",{parentName:"ul"},"one or more ",Object(a.b)("inlineCode",{parentName:"li"},"proof")," (signature) section, specific to intended verification audience(s)"),Object(a.b)("li",{parentName:"ul"},"a payload, usually structured. "),Object(a.b)("li",{parentName:"ul"},"VCs also contain semantic references linked by URI, in an array at the\nbeginning of the object called ",Object(a.b)("inlineCode",{parentName:"li"},"@context"),". ")),Object(a.b)("p",null,Object(a.b)("em",{parentName:"p"},"For a more introductory explanation and guidance on understanding the\nspecification, see the ",Object(a.b)("a",{parentName:"em",href:"https://spruceid.dev/docs/glossary#verifiable-credentials-vcs"},"glossary\nentry"))),Object(a.b)("h3",{id:"wallet"},"Wallet"),Object(a.b)("p",null,'Wallets are specialized pieces of software that store credentials, usually\nsecured access to the cryptographic keys associated with a specific identifiers.\nIt may store other kinds of credentials as well, such as unsigned credentials,\nself-attested/self-issued credentials, or credentials with subjects whose keys\nit does not control, but its primary function is signing to receive and present\nits "own" credentials.  DIDKit is unopinionated and easy to extend, but DIDKit\nis also primary designed to work with Credible, and both are built around\nSpruce\'s core ',Object(a.b)("inlineCode",{parentName:"p"},"ssi")," library.  ",Object(a.b)("em",{parentName:"p"},"For a more introductory explanation and\nspecification, see the ",Object(a.b)("a",{parentName:"em",href:"https://spruceid.dev/docs/glossary#wallet"},"glossary\nentry"))),Object(a.b)("h3",{id:"decentralized-identifiers-dids"},'Decentralized Identifiers ("',Object(a.b)("em",{parentName:"h3"},"DIDs"),'")'),Object(a.b)("p",null,'Decentralized Identifiers are stable identifiers which are bound to a\ncontrolling keypair, which is usually rotatable without changing the identifier.\nThese stable identifiers can be used to query a verifiable data registry to get\na "DID Document" containing the current controlling keypair and other\ninformation for verifying information associated with the DID.  ',Object(a.b)("em",{parentName:"p"},"For a more\nintroductory explanation and specification, see the ",Object(a.b)("a",{parentName:"em",href:"https://spruceid.dev/docs/glossary#decentralized-identifiers-dids"},"DID glossary\nentry")," and\nthe ",Object(a.b)("a",{parentName:"em",href:"https://spruceid.dev/docs/glossary#did-document"},"DID Document glossary\nentry"))),Object(a.b)("h3",{id:"did-method"},"DID Method"),Object(a.b)("p",null,"A set of interdependent governance, publication, and discovery mechanisms for\nDIDs in a given DID namespace, specified by a registered specification. Most DID\nmethods use blockchains or other publically-readable distributed ledgers as data\nregistries, but some, such as DID:Web, use other systems of verification, such\nas secure DNS resolution. ",Object(a.b)("em",{parentName:"p"},"For a more introductory explanation and\nspecification, see the ",Object(a.b)("a",{parentName:"em",href:"https://spruceid.dev/docs/glossary#did-method"},"glossary\nentry"))),Object(a.b)("h3",{id:"didkey"},"DID:Key"),Object(a.b)("p",null,"A special DID Method that generates conformant, offchain DID documents for\nlocal, private, and/or ephemeral resolution from a keypair. This can be helpful\nfor integrating conventional PKI or signing infrastructure with DID issuance, or\nto allow caching or local resolution of DID documents where it is undesirable or\nimpossible to resolve remote DIDs. ",Object(a.b)("em",{parentName:"p"},"For a more introductory explanation and\nspecification, see the ",Object(a.b)("a",{parentName:"em",href:"https://spruceid.dev/docs/glossary#didkey"},"glossary\nentry"))),Object(a.b)("h3",{id:"json-web-key-jwk"},"JSON Web Key (JWK)"),Object(a.b)("p",null,'A JSON Web Key, or a "JWK" for short, is a special class of JSON objects(see\n',Object(a.b)("a",{parentName:"p",href:"https://spruceid.dev/docs/glossary#json"},"glossary entry")," ) objects specified\nfor containing cryptographic key or set of keys. They were\n",Object(a.b)("a",{parentName:"p",href:"https://tools.ietf.org/html/rfc7517"},"specified")," in 2015 through the IETF."))}p.isMDXComponent=!0}}]);