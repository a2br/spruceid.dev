(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{112:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return p}));var o=n(0),i=n.n(o);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=i.a.createContext({}),d=function(e){var t=i.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=d(e.components);return i.a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},b=i.a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,r=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=d(n),b=o,p=u["".concat(r,".").concat(b)]||u[b]||m[b]||a;return n?i.a.createElement(p,c(c({ref:t},s),{},{components:n})):i.a.createElement(p,c({ref:t},s))}));function p(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,r=new Array(a);r[0]=b;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:o,r[1]=c;for(var s=2;s<a;s++)r[s]=n[s];return i.a.createElement.apply(null,r)}return i.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},87:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return l})),n.d(t,"toc",(function(){return s})),n.d(t,"default",(function(){return u}));var o=n(3),i=n(7),a=(n(0),n(112)),r=["components"],c={id:"document-loading",title:"Document Loading"},l={unversionedId:"didkit/document-loading",id:"didkit/document-loading",isDocsHomePage:!1,title:"Document Loading",description:"Introduction",source:"@site/docs\\didkit\\document-loading.md",slug:"/didkit/document-loading",permalink:"/docs/didkit/document-loading",editUrl:"https://github.com/spruceid/docs/didkit/document-loading.md",version:"current",sidebar:"docs",previous:{title:"Core Concepts",permalink:"/docs/didkit/concepts"},next:{title:"Changelog",permalink:"/docs/didkit/changelog"}},s=[{value:"Introduction",id:"introduction",children:[]},{value:"Document types",id:"document-types",children:[]},{value:"Different modes of document loading",id:"different-modes-of-document-loading",children:[]},{value:"Pre-loading a document resource at build time",id:"pre-loading-a-document-resource-at-build-time",children:[]},{value:"Loading a document resource locally at run-time",id:"loading-a-document-resource-locally-at-run-time",children:[]},{value:"Caching remote documents at run-time",id:"caching-remote-documents-at-run-time",children:[]},{value:"Loading remote document at run-time",id:"loading-remote-document-at-run-time",children:[]}],d={toc:s};function u(e){var t=e.components,n=Object(i.a)(e,r);return Object(a.b)("wrapper",Object(o.a)({},d,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h2",{id:"introduction"},"Introduction"),Object(a.b)("h4",{id:"urls-that-point-to-documents"},Object(a.b)("em",{parentName:"h4"},"URLs that point to documents")),Object(a.b)("p",null,'One of the trickiest things about Verifiable Credentials, for people without\nJSON-LD or Semantic Web experience, is the referencing of external (linked)\ndocuments, represented in Verifiable Credentials and other Linked-Data documents\nby URLs. Thinking of them as URLs is deceptive, however, as fetching each from\nthe open web at the time of verification of a credential bears many risks to\nboth security and privacy-- although represented as URLs, they are best "cached"\nor stored locally, to be checked at time of verification.'),Object(a.b)("h2",{id:"document-types"},"Document types"),Object(a.b)("p",null,'The most common Linked-Data documents used to make Verifiable Contexts more\nportable are "context files", which are linked in the mandatory ',Object(a.b)("inlineCode",{parentName:"p"},"@context")," field\nof all verifiable credentials.  These contain all the additional the vocabulary\nreferences needed to ",Object(a.b)("a",{parentName:"p",href:"concepts#semantics"},"semantically disambiguate"),' the keys\nand values that make up a credential. I say "additional" because there is a\n',Object(a.b)("a",{parentName:"p",href:"https://www.w3.org/2018/credentials/v1"},"core vocabulary")," in the core context\nfile maintained by the Verifiable Credentials working group, which must be\nreferenced by all conformant VCs to anchor all mandatory terms defined by the VC\nspecification. There are also some additional core vocabularies that cover a lot\nof common semantics, like the ",Object(a.b)("a",{parentName:"p",href:"https://schema.org/"},"schema.org")," project central\nto the Semantic Web community, and VC-specific extensions to the core context\nmaintained by the W3C-CCG community, such as the ",Object(a.b)("a",{parentName:"p",href:"https://w3c-ccg.github.io/security-vocab/"},"security\nvocabulary")," for anchoring\ncryptographic terms and proof-object properties and the ",Object(a.b)("a",{parentName:"p",href:"https://w3c-ccg.github.io/traceability-vocab/"},"traceability\nvocabulary")," for anchoring terms\ncommon across major supply chain use cases.  It is common practice, when\nestablishing anything from a small use-case to a vast ecosystem, to establish\none context file (or more) to anchor all the VCs involved."),Object(a.b)("p",null,"In addition to context files, there are other kinds of Linked-Data/JSON-LD\ndocuments that you might need to publish/host or resolve.  For example, the\n",Object(a.b)("a",{parentName:"p",href:"https://w3c-ccg.github.io/vc-status-rl-2020/"},"RevocationList2020")," and\n",Object(a.b)("a",{parentName:"p",href:"https://w3c-ccg.github.io/vc-status-list-2021/"},"StatusList2021"),' specifications\nrely on "status lists" to be published to and queried over the open web in much\nthe same was as context files. These lists are the linked-data equivalent of the\n',Object(a.b)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Online_Certificate_Status_Protocol"},"OCSP")," status\nlists so central to the certificate-authority PKI networks that power HTTPS/TLS\nand other basic cybersecurity infrastructure. Like those, they may need to be\npropagated and cached, with latency built into systems relying on them. See\nbelow for details on how to handle that on both publisher and verifier sides of\nthe interaction."),Object(a.b)("h2",{id:"different-modes-of-document-loading"},"Different modes of document loading"),Object(a.b)("p",null,'In a nutshell, there are three options for loading contexts into an\nissuer/verifier, i.e., four different ways an instance of DIDKit can dereference\na URL pointing to a document. Technically, these are "resources" in the\nclassical sense, but DIDKit is configured to build and maintain a local\nreference table to avoid fetching remote resources, which is disabled by\ndefault.'),Object(a.b)("p",null,"Ranked by their simplicity and security, the four ways of loading a document for\nissuance or verification purposes are:"),Object(a.b)("ol",null,Object(a.b)("li",{parentName:"ol"},"Package a resource into DIDKit at build time."),Object(a.b)("li",{parentName:"ol"},"Load a context resource locally at run time. (Coming soon)"),Object(a.b)("li",{parentName:"ol"},'Periodically reload a context resource "remotely" from a remote trusted\nsource. (Coming soon)'),Object(a.b)("li",{parentName:"ol"},"Load a context resource remotely at time of verification (",Object(a.b)("em",{parentName:"li"},"Strongly\ndiscouraged and not supported or endorsed by Spruce"),")")),Object(a.b)("p",null,"The security advantages of 1 over 2 and 2 over 3 should be clear, but it is also\nworth mentioning that option #4 has major privacy/data-leakage implications\nwhich make it categorically deprecated.  Option #3 is not completely free from\nthe complications and risks of option #4, so it is strongly recommended that 1\nand 2 be ruled out categorically before finding an optimal balance of\nmitigations and performance for implementing #3."),Object(a.b)("h2",{id:"pre-loading-a-document-resource-at-build-time"},"Pre-loading a document resource at build time"),Object(a.b)("p",null,"Any context file can be added to the directory, ",Object(a.b)("inlineCode",{parentName:"p"},"ssi/contexts/"),", which DIDKit\nqueries for contexts.  A few considerations, though:"),Object(a.b)("ol",null,Object(a.b)("li",{parentName:"ol"},"Context files are intellectual property, and as such should be covered by\nlicenses if upstreamed or otherwise distributed. Add licensing information\nabout any new context file to ",Object(a.b)("inlineCode",{parentName:"li"},"ssi/contexts/LICENSES.md")," and\n",Object(a.b)("inlineCode",{parentName:"li"},"ssi/contexts/README.md")," as needed.",Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"If it's a W3C context file you are adding, simply add the name and URL in\n",Object(a.b)("inlineCode",{parentName:"li"},"ssi/contexts/README.md")," with the other W3C documents (they are already\ncovered by W3C license statements)."),Object(a.b)("li",{parentName:"ul"},"If the new context is covered by neither W3C's license, or an Apache-2.0 or\nCC-BY-SA-3.0 license, you will also need to update the license property in\n",Object(a.b)("inlineCode",{parentName:"li"},"ssi/contexts/Cargo.toml"),"."))),Object(a.b)("li",{parentName:"ol"},"Add a line in ",Object(a.b)("inlineCode",{parentName:"li"},"contexts/src/lib.rs")," using ",Object(a.b)("inlineCode",{parentName:"li"},"include_str")," to load the JSON-LD\nfile and export it as a ",Object(a.b)("strong",{parentName:"li"},"constant variable"),".",Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"Optionally, you may want to add the URL in a rustdoc comment."))),Object(a.b)("li",{parentName:"ol"},"In ",Object(a.b)("inlineCode",{parentName:"li"},"ssi/src/jsonld.rs"),":")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Declare and export a constant for the context file's canonical URL."),Object(a.b)("li",{parentName:"ul"},"In the ",Object(a.b)("inlineCode",{parentName:"li"},"lazy_static")," block, define the context document as a\n",Object(a.b)("inlineCode",{parentName:"li"},"RemoteDocument"),", referencing the context file variable defined in\ncontexts/src/lib.rs and the constant defined for the URL."),Object(a.b)("li",{parentName:"ul"},"In ",Object(a.b)("inlineCode",{parentName:"li"},"StaticLoader"),", match the context file's URL(s) to the context document.")),Object(a.b)("p",null,"After that, you are ready to follow the steps in didkit to build didkit-cli or\ndidkit-http, using the locally-modified ssi repo."),Object(a.b)("h2",{id:"loading-a-document-resource-locally-at-run-time"},"Loading a document resource locally at run-time"),Object(a.b)("p",null,"Coming soon!"),Object(a.b)("h2",{id:"caching-remote-documents-at-run-time"},"Caching remote documents at run-time"),Object(a.b)("p",null,"Coming soon!"),Object(a.b)("h2",{id:"loading-remote-document-at-run-time"},"Loading remote document at run-time"),Object(a.b)("p",null,"Coming never! See above for reasons why we do not support this feature out of\nthe box.  Builder beware!"))}u.isMDXComponent=!0}}]);