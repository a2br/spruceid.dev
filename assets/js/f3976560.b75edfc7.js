"use strict";(self.webpackChunkdevsite=self.webpackChunkdevsite||[]).push([[844],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return h}});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=i.createContext({}),d=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=d(e.components);return i.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},p=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=d(n),h=a,m=p["".concat(l,".").concat(h)]||p[h]||u[h]||o;return n?i.createElement(m,r(r({ref:t},c),{},{components:n})):i.createElement(m,r({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,r=new Array(o);r[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,r[1]=s;for(var d=2;d<o;d++)r[d]=n[d];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}p.displayName="MDXCreateElement"},1436:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},metadata:function(){return l},toc:function(){return d},default:function(){return u}});var i=n(7462),a=n(3366),o=(n(7294),n(3905)),r=["components"],s={id:"quickstart",slug:"/",hide_table_of_contents:!0,title:"Quickstart Guide to working with DIDKit"},l={type:"mdx",permalink:"/",source:"@site/src/pages/index.md"},d=[{value:"Step 0: install DIDKit",id:"step-0-install-didkit",children:[]},{value:"Step 1: Issue your first Verifiable Credential",id:"step-1-issue-your-first-verifiable-credential",children:[]},{value:"Step 2: Verifying a real VC",id:"step-2-verifying-a-real-vc",children:[]}],c={toc:d};function u(e){var t=e.components,n=(0,a.Z)(e,r);return(0,o.kt)("wrapper",(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"getting-started-with-spruce-id"},"Getting Started with Spruce ID"),(0,o.kt)("p",null,"This site exists for three complementary purposes: "),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"To get you ",(0,o.kt)("em",{parentName:"li"},"using")," DIDKit and other Spruce ID tooling as smoothly and quickly\nas possible"),(0,o.kt)("li",{parentName:"ol"},"To provide developer ",(0,o.kt)("a",{parentName:"li",href:"/docs/"},"docs")," and ",(0,o.kt)("a",{parentName:"li",href:"/docs/glossary"},"references"),"\nthat help you understand ",(0,o.kt)("a",{parentName:"li",href:"/docs/didkit"},"DIDKit")),(0,o.kt)("li",{parentName:"ol"},"To help you wrap your head around\n",(0,o.kt)("a",{parentName:"li",href:"/docs/primer/"},"Verifiable Credentials"),", find the right ",(0,o.kt)("a",{parentName:"li",href:"/docs/didkit/did-methods"},"Decentralized\nIdentifier scheme"),' for your project, and generally just\nget you from "curious\ud83e\udd14" to "wizard\ud83e\uddd9\u200d\u2642\ufe0f" as fast as we can.')),(0,o.kt)("p",null,"The quickstart guide below describes how to perform credential issuance and verification with DIDKit's CLI tool. Documentation for use with other platforms can be found in the navigation bar on the ",(0,o.kt)("a",{parentName:"p",href:"/docs/didkit-packages/rust"},"DIDKit Packages")," section."),(0,o.kt)("h2",{id:"step-0-install-didkit"},"Step 0: install DIDKit"),(0,o.kt)("p",null,"To install the DIDKit command line tool from crates.io on GNU/Linux, MacOS,\nWindows+WSL with\n",(0,o.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/cargo/getting-started/installation.html"},"cargo")," and\n",(0,o.kt)("inlineCode",{parentName:"p"},"build-essential")," tools already installed, run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"cargo install didkit-cli\n")),(0,o.kt)("p",null,"Or if you prefer, you can build manually ",(0,o.kt)("a",{parentName:"p",href:"/docs/didkit/install#manual"},"from source")," or ",(0,o.kt)("a",{parentName:"p",href:"/docs/didkit/install#docker"},"via docker"),"."),(0,o.kt)("h2",{id:"step-1-issue-your-first-verifiable-credential"},"Step 1: Issue your first Verifiable Credential"),(0,o.kt)("p",null,"W3C Verifiable Credentials are a standard data format for claims expressed in\nJSON, also known as digital attestations. They contain the claim being made,\ndata schema references, and a digital signature to be verified and consumed by\nunknown future parties. More info in the ",(0,o.kt)("a",{parentName:"p",href:"/docs/primer"},"primer"),"."),(0,o.kt)("p",null,"So what do you need to get started with VCs? The first ingredient is DIDKit, and the second is a signing key, which DIDKit can generate automatically:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"didkit generate-ed25519-key > issuer_key.jwk\n")),(0,o.kt)("p",null,"Or, if you want to use pre-existing key material, it can be accessed from a filepath; a Ed25519 key in JWK format can be linked or copied to the DIDKit root."),(0,o.kt)("p",null,"Once this key is on hand, you have to structure some data to be the payload of\nthis VC you want to issue. For simplicity, let's throw this into a JSON file to\nbe signed over in the next step."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'cat > payload.json <<EOF\n{\n    "@context": "https://www.w3.org/2018/credentials/v1",\n    "id": "urn:uuid:`uuidgen`",\n    "type": ["VerifiableCredential"],\n    "issuer": "did:web:issuance.yournamehere.com",\n    "issuanceDate": "`date --utc +%FT%TZ`",\n    "credentialSubject": {\n        "id": "did:example:0x1234someguywetalkinabout"\n    }\n}\nEOF\n')),(0,o.kt)("p",null,"If this is your first Verifiable Credential, don't worry for now about the exact meaning or function of any specific property."),(0,o.kt)("p",null,"Now you're ready to sign it with the private key, which has to be passed in two different ways: as a key, and as a \"verification method\" (a transformation of the key which we'll explain later)."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},'verification_method=$(didkit key-to-verification-method -k issuer_key.jwk)\ndidkit vc-issue-credential -k issuer_key.jwk -v "$verification_method" -p assertionMethod <payload.json >credential-signed.jsonld\ncat credential-signed.jsonld\n')),(0,o.kt)("p",null,"And that's it! Wherever this signed blob ends up, it can be handled by standard\nJSON tooling, and VC tooling can confirm it as trustworthy (or at\nleast, as trustworthy as ",(0,o.kt)("inlineCode",{parentName:"p"},'"yournamehere.com"')," was at the time in ",(0,o.kt)("inlineCode",{parentName:"p"},'"issuanceDate"'),").\nNotice that the ",(0,o.kt)("inlineCode",{parentName:"p"},'"issuer"'),' field identified you by a domain name, and a "did:web:"\nprefix. We\'ll explain this one in the next step.'),(0,o.kt)("h2",{id:"step-2-verifying-a-real-vc"},"Step 2: Verifying a real VC"),(0,o.kt)("p",null,"Let's take a real-life VC issued by our testing faucet and drop it into your DIDKit root directory as an example.  You can fetch it with a simple curl:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"curl https://demo.spruceid.com/get-vc >example.vc\n")),(0,o.kt)("details",null,(0,o.kt)("summary",null,"What you get back should look something like this:"),(0,o.kt)("div",null,(0,o.kt)("code",null,'\n{\n  "@context":["https://www.w3.org/2018/credentials/v1"],\n  "type":"VerifiableCredential",\n  "credentialSubject":{},\n  "issuer":"did:web:demo.spruceid.com",\n  "issuanceDate":"2021-09-13T18:23:56Z",\n  "proof":{\n    "type":"Ed25519Signature2018",\n    "proofPurpose":"assertionMethod",\n    "verificationMethod":"did:web:demo.spruceid.com#_t-v-Ep7AtkELhhvAzCCDzy1O5Bn_z1CVFv9yiRXdHY",\n    "created":"2021-09-13T18:23:56.483Z",\n    "jws":"eyJhbGciOiJFZERTQSIsImNyaXQiOlsiYjY0Il0sImI2NCI6ZmFsc2V9..X5J2jI5j3TPqFO_g6XOlB730WlXJ8mDsfoyLQ4u60MelVosi1Et6V_pB7-zELDggdqZTsKQjSqDodv0m7ui1Bg"\n  },\n  "expirationDate":"2021-10-13T18:23:56Z"\n}\n'.slice(1,-1))),(0,o.kt)("br",null),(0,o.kt)("div",null,(0,o.kt)("i",null,"Note: Another way to get a fresh example VC (issued to an actual DID) is to first install the Credible mobile wallet on a mobile device, whether from ",(0,o.kt)("a",{href:"https://github.com/spruceid/credible"},"source code"),", from ",(0,o.kt)("a",{href:"https://testflight.apple.com/join/CPZON8Ho"},"Apple Test Flight"),", or from ",(0,o.kt)("a",{href:"https://play.google.com/store/apps/details?id=com.spruceid.app.credible&hl=de&gl=US"},"the Google Play store"),". This will automatically generate an off-chain did-tz (it will resemble ",(0,o.kt)("code",null,"did:tz:tz1aTuW7578MTt3ZtWYCjX65nUXkzE1CMcAf"),"), and when you navigate to ",(0,o.kt)("a",{href:"https://demo.spruceid.com"},"our demo faucet"))," on a computer, you can use the QR issuance to get a VC issued into the wallet, identifying its subject by its unique, decentralized identifier.")),(0,o.kt)("br",null),'This VC looks much like the one you issued in the previous step, but with a "proof" section attached which contains the issuer\'s signature and metadata for verifying it.',(0,o.kt)("p",null,"To verify this signature:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"didkit vc-verify-credential -p assertionMethod <example.vc >result.json\n")),(0,o.kt)("p",null,"That will spit out a verbose response as a JSON file listing the checks passed, warnings, and errors. If everything is set up properly, you should see this when you ",(0,o.kt)("inlineCode",{parentName:"p"},"cat result.json"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{"checks":["proof"],"warnings":[],"errors":[]}\n')),(0,o.kt)("p",null,"You might be asking yourself, though, how did DIDKit get from ",(0,o.kt)("inlineCode",{parentName:"p"},'"issuer": "did:web:demo.spruceid.com:2021:vc-faucet"')," to having the public key (and knowing the ",(0,o.kt)("em",{parentName:"p"},"type")," of the public key) to be able to verify the signature in the proof? This is the magic of DIDs!"),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Details of \u2728",(0,o.kt)("strong",null,"Magical Step 1.5"),"\u2728 - the ",(0,o.kt)("em",null,"(often implicit!)")," resolution step"),(0,o.kt)("br",null),"Let's take the simple example VC above, issued by ",(0,o.kt)("code",null,"did:web:demo.spruceid.com:2021:vc-faucet"),", i.e. our ",(0,o.kt)("a",{href:"https://demo.spruceid.com/"},"VC faucet"),'). Information about this issuer has to be "resolved" in much the same way that a domain name resolves to an IP address. There are many ways of resolving DIDs, but let\'s stick to DID-web for now, as it is the easiest to understand. A "did-web" is a DID which publishes its "DID Document" (a data file containing identity information and public keys) in a standardized location at the website it identifies. ',(0,o.kt)("a",{href:"https://demo.spruceid.com/2021/vc-faucet/did.json"},"https://demo.spruceid.com/2021/vc-faucet/did.json")," publishes resolution information about the DID ",(0,o.kt)("code",null,"did:web:demo.spruceid.com:2021:vc-faucet"),'. A "did-web" tells you exactly where to go to "resolve" a DID into a DID document:',(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"you tack ",(0,o.kt)("code",null,"/.well-known/did.json")," to the end of a root\ndomain"),(0,o.kt)("li",{parentName:"ul"},"or just ",(0,o.kt)("code",null,"/did.json")," if a path is already provided (as in ",(0,o.kt)("inlineCode",{parentName:"li"},"2021:vc-faucet"),",\nthe path at the end of the did-web ",(0,o.kt)("code",null,"did:web:demo.spruceid.com:2021:vc-faucet"),")")),(0,o.kt)("p",null,"Then fetch that JSON blob. "),(0,o.kt)("p",null,"Other DID methods have more complex resolution mechanisms, but take\nthe same input (a DID string) which resolves to the same\nkind of DID document (except a few optional parameters specific to each DID method)"),(0,o.kt)("p",null,'The most basic and useful thing that a DID Document contains is a series of\n"verification methods", i.e., public keys used for specific purposes and which\ncan be referenced by specific relative references. These are used to check the\nsignature on a VC, among other purposes. See, for example, this DID document\nfrom the demo app we use to test DIDKit and wallets:'),(0,o.kt)("details",null,(0,o.kt)("summary",{class:"fake-h3"},"Behold! A real-world DID Document!"),(0,o.kt)("br",null),(0,o.kt)("code",null,'\n{\n  "@context": [\n    "https://www.w3.org/ns/did/v1",\n    {\n      "@id": "https://w3id.org/security#publicKeyJwk",\n      "@type": "@json"\n    }\n  ],\n  "id": "did:web:demo.spruceid.com:2021:vc-faucet",\n  "verificationMethod": [\n    {\n      "id": "did:web:demo.spruceid.com:2021:vc-faucet#key-1",\n      "type": "Ed25519VerificationKey2018",\n      "controller": "did:web:demo.spruceid.com:2021:vc-faucet",\n      "publicKeyJwk": {\n        "kty": "OKP",\n        "crv": "Ed25519",\n        "x": "ZMKSD7bKSOg_4IQhZUd-2VCoBTCrEB8L2tql4oRNDUg"\n      }\n    }\n  ],\n  "authentication": [\n    "did:web:demo.spruceid.com:2021:vc-faucet#key-1"\n  ],\n  "assertionMethod": [\n    "did:web:demo.spruceid.com:2021:vc-faucet#key-1"\n  ]\n}\n'.slice(1,-1)),(0,o.kt)("br",null),'*Note: this DID Document has an Ed25519 key as its "key-1" (default key) that is the designated key for ',(0,o.kt)("code",null,"`authentication`")," and",(0,o.kt)("code",null,"`assertionMethod`")," purposes. The latter alias signals to wallets that this is the key used to sign assertions about the world-- assertions that this public key makes verifiable.*"),(0,o.kt)("br",null),(0,o.kt)("p",null,"On the issuer side a verification method can be derived\nfrom the private key, that's not an option downstream. That's\nwhy DID Documents exist: to publish annotated key material\nthat can be used to verify signatures in the world. Having resolved\nthe issuer's DID, you now have the subset of its contents needed to verify a\ncredential: the \"verification method\" for checking the signatures on a VC."),(0,o.kt)("p",null,"Spelled out step by step this sounds like a lot, but in practice DID resolution\nhappens automatically once everything is up and running, as you already saw above.  "),(0,o.kt)("p",null,"If you needed to do only the solution step for some reason,\nyou could fetch a DID Document with a single DIDKit command as well, in any\ncontext with web access:"),(0,o.kt)("code",null,"didkit did-dereference did:web:demo.spruceid.com:2021:vc-faucet")))}u.isMDXComponent=!0}}]);